Q2 Demonstrate your application to deploy on S3 / SEBS using AWS CodePipeline
		Step 1: Create and Configure the S3 Bucket 
		1.	Navigate to the S3 service in the AWS Console. 
		2.	Click Create bucket. 
		3.	Give it a globally unique name (e.g., my-codepipeline-demo-siteuniquename). 
			Uncheck "Block all public access". Acknowledge the warning. This is necessary to make your website public. 
		1.	Click create bucket. 
		2.	Go into your new bucket, click the Properties tab. 
		1.	Scroll down to Static website hosting and click Edit. 
		2.	Enable it, set the Index document to index.html, and save changes. 
		3.	Go to the Permissions tab, click Edit under Bucket policy, and paste the following policy. Replace YOUR_BUCKET_NAME with your bucket's name. 
		Step 2: Create the AWS CodePipeline 
		1.	Navigate to the CodePipeline service in the AWS Console. 
		2.	Click Create pipeline. 
		Step 3: Pipeline settings: 
		○	Pipeline name: My-S3-Website-Pipeline. 
		○   Leave Service role as is; CodePipeline will create a new one for you. ○   Click Next. 
		Step 4: Source stage: 
		一	Source provider: Select GitHub (via GitHub App ). 
		○ Click Create a connection. A new window will open. Name your connection (e.g., my-github-connection) and connect to your GitHub account. 
		Step 4: Build stage: 
		o	Build provider: Select AWS CodeBuild. 
		○ Click Create project. A new window will appear. 
		Environment image: Managed image. 
		■ Operating system: Amazon Linux 2. 
		■ Runtime(s): Standard. 
		■ Image: aws/codebuild/amazonlinux2-x86_64standard:5.0. 
		■ Buildspec: Check "Use a buildspec file". CodeBuild will automatically look for buildspec.yml in your repo's root
		o	Click Continue 	to CodePipeline.
		o	Click Next. 
		Step 5: Deploy stage: 
		Deploy provider: Select Amazon S3.
		Region: Your current region.
		Bucket: Select the S3 bucket you created earlier. 
		○ Check the box for "Extract file before deploy". This unzips the build artifact and places the files directly in the bucket. 
		Step 6: Review all the settings and click Create pipeline
		The pipeline will automatically start its first run. You can watch it progress through the stages. Once it succeeds, go to your S3 bucket's static website URL (from Properties -> Static website hosting) to see your live page! 

Q3Deploy sample application on EC2 instance using AWS CodeDeploy.
		Step 1: Create an IAM Role (i)
		The EC2 instance needs permission to communicate with the CodeDeploy service.
		1.	Navigate to the IAM service.
		2.	Go to Roles and click Create role.
		3.	Trusted entity type: Select AWS service.
		4.	Use case: Select EC2. Click Next.
		5.	Search for and add the permission policy:
		AmazonEC2RoleforAWSCodeDeploy. Click Next
		Step 2: Create an IAM Role (ii)
		The EC2 instance needs permission to communicate with the CodeDeploy service.
		6.	Navigate to the IAM service.
		7.	Go to Roles and click Create role.
		8.	Trusted entity type: Select AWS service.
		9.	Use case: Select CodeDeploy. Click Next		
		Step 3: Launch and Prepare the EC2 Instance
		1.	Navigate to the EC2 service and click Launch instances.
		2.	Name: My-CodeDeploy-Server.
		3.	AMI: Select Amazon Linux 2 AMI (HVM) - Free tier eligible.
		4.	Instance type: t2.micro (Free tier eligible).
		5.	Key pair: Create or select an existing key pair to be able to SSH into the instance if needed.
		6.	Network settings:In the Security group, ensure "Allow HTTP traffic from the internet" is checked. This opens port 80 so you can view the website.
		7.	Advanced details:Expand this	section and	for	IAM instance	profile,	select	the EC2CodeDeploy-Role you just created.
		8.	Click Launch instance.
		9.	Once the instance is running, select it and click Connect. Use the EC2 Instance Connect or your SSH client to connect to it.
		10.	In the instance's terminal, install the CodeDeploy agent:#!/bin/bash sudo	yum update -y sudo yum	install ruby-y	sudo yum	install wget -y		cd/home/ec2- user
		wget	https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install chmod +x ./install sudo ./install auto
		sudo service codedeploy-agent status (Make sure the codedeploy-agent is running). The URL is for the us-east-1 region; adjust it if you are in a different region.
		Step 4: Create the CodeDeploy Application Navigate to the CodeDeploy service.
		1.	On the left menu, select Applications and click Create application.
		2.	Application name: My-Demo-Application.
		3.	Compute platform: Select EC2/On-premises.
		4.	Click Create application.
		Step 5: Create a Deployment Group 
		1.	Inside your new application, click Create deployment group.
		2.	Deployment group name: My-EC2-Deployment-Group.
		3.	Service Role: Click Create a new service role or select an existing one with the AWSCodeDeployRole policy. This role gives CodeDeploy permission to interact with your EC2 instances.
		5.	Environment configuration:○	Check Amazon EC2 instances.
		○	In the Key field, select Name. In the Value field, enter the name you gave your EC2 instance: My-CodeDeploy-Server. This tells CodeDeploy which instances to target
		6.	Deployment settings: Choose CodeDeployDefault.AllAtOnce.
		7.	Load Balancer: Uncheck "Enable load balancing".
		Step 6: Create the Full Pipeline for EC2
		Now we'll create a new pipeline that includes the CodeDeploy stage.
		1.	Go back to CodePipeline and click Create pipeline.
		2.	Pipeline name: My-EC2-App-Pipeline.
		3.	Source Stage: Configure it exactly as before, connecting to your GitHub repository.
		4.	Build Stage: Configure it exactly as before, selecting the same AWS CodeBuild project (my-s3-build-project). The build artifact works for both S3 and CodeDeploy.
		1.	Deploy Stage: This is where it changes.
		○	Deploy provider: Select AWS CodeDeploy.
		○	Application name: Select My-Demo-Application from the dropdown.
		○	Deployment group: Select My-EC2-Deployment-Group from the dropdown
		2.	Review and click Create pipeline
		The pipeline will run. The Deploy stage will now use CodeDeploy to copy the files to /var/www/html/ on your EC2 instance and run the scripts in your appspec.yml file to start the Apache server.
		To verify, get the Public IPv4 address from your EC2 instance's details page and paste it into your browser. You should see your sample web page!


Q4)Install Terraform on Windows machine. Build, apply and destroy AWS EC2 using Terraform.
		Step1: Check that no instance is running on EC2
		Step2: Create an iam user with programmatic password and administrative
		Step3: Create accesses key and secret key for command line interface
		Step4: Write a terraform program 
		copy accesskey and secretkey
    make a file using "".tf"
		code:
		provider "aws" {
			access_key= ""
			secret_key= ""
			region="us-east-1"
		}
		resource "aws_instance" "terra_XIE" {
			ami = "" //EC2-launch instance-scrolldown-select ubuntu//
			instance_type"t3.micro"
		}
		Step5: Initialize the terraform by command "terraform init" in terminal
		Step6: Run the command “terraform plan”
		Step7: Check the instance on EC2 before the apply command 
		Step8: Run the command, “terraform apply.”
    entry a value :yes 
		Step9: Check terraform created instance on EC2 
		Step10: Destroy the instance by running command “terraform destroy”.

